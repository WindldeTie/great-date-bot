package main

import (
	"context"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/joho/godotenv"
	"greateDateBot/handler"
	"greateDateBot/handler/repo"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"time"
)

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	if os.Getenv("RAILWAY_ENVIRONMENT") == "" {
		godotenv.Load()
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	db := initDatabase()
	defer db.Close()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	bot := initBot()

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
	userRepo := repo.NewRepo(db)
	startBot(bot, userRepo)
}

func initDatabase() *pgxpool.Pool {
	dbURL := os.Getenv("DATABASE_URL")
	if dbURL == "" {
		log.Fatal("DATABASE_URL environment variable is required")
	}

	// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –¥–ª—è pgx
	dbURL = strings.Replace(dbURL, "postgres://", "postgresql://", 1)

	conn, err := pgxpool.New(context.Background(), dbURL)
	if err != nil {
		log.Fatalf("Database connection failed: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err = conn.Ping(ctx); err != nil {
		log.Fatalf("Database ping failed: %v", err)
	}

	log.Println("‚úÖ Database connected successfully")
	return conn
}

func initBot() *tgbotapi.BotAPI {
	token := os.Getenv("BOT_TOKEN")
	if token == "" {
		log.Fatal("BOT_TOKEN environment variable is required")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panicf("Bot creation failed: %v", err)
	}

	log.Printf("‚úÖ Authorized as @%s", bot.Self.UserName)
	return bot
}

func startBot(bot *tgbotapi.BotAPI, userRepo *repo.Repo) {
	port := getPort()
	webhookURL := os.Getenv("RAILWAY_STATIC_URL")

	if webhookURL == "" {
		startPolling(bot, userRepo)
	} else {
		startWebhook(bot, userRepo, webhookURL, port)
	}
}

func startPolling(bot *tgbotapi.BotAPI, userRepo *repo.Repo) {
	log.Println("üöÄ Starting in POLLING mode (development)")
	bot.Request(tgbotapi.DeleteWebhookConfig{DropPendingUpdates: true})

	handler.NewHandler(bot, userRepo).Start(false)
}

func startWebhook(bot *tgbotapi.BotAPI, userRepo *repo.Repo, webhookURL, port string) {
	log.Printf("üöÄ Starting in WEBHOOK mode: %s", webhookURL)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
	webhookConfig, err := tgbotapi.NewWebhook(webhookURL + "/webhook")
	if err != nil {
		log.Panicf("Webhook creation failed: %v", err)
	}
	bot.Request(webhookConfig)

	// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
	updates := bot.ListenForWebhook("/webhook")
	go func() {
		log.Printf("üåê HTTP server listening on port %s", port)
		log.Fatal(http.ListenAndServe(":"+port, nil))
	}()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	setupGracefulShutdown()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	botHandler := handler.NewHandler(bot, userRepo)
	log.Println("‚úÖ Bot is running and ready")

	for update := range updates {
		botHandler.HandleUpdate(update)
	}
}

func getPort() string {
	if port := os.Getenv("PORT"); port != "" {
		return port
	}
	return "8080"
}

func setupGracefulShutdown() {
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)
	go func() {
		<-c
		log.Println("üõë Shutting down...")
		os.Exit(0)
	}()
}
