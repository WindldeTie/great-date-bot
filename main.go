package main

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/joho/godotenv"
	"greateDateBot/handler"
	"greateDateBot/handler/repo"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"time"
)

func main() {
	// –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	log.Println("=== Checking environment variables ===")
	checkEnvVariables()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	if os.Getenv("RAILWAY_ENVIRONMENT") == "" {
		err := godotenv.Load()
		if err != nil {
			log.Printf("Note: .env file not found (this is normal on Railway)")
		} else {
			log.Println("Loaded .env file for local development")
		}
	}

	// –®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç—å DATABASE_URL
	databaseURL := os.Getenv("DATABASE_URL")
	if databaseURL == "" {
		log.Println("‚ùå ERROR: DATABASE_URL environment variable is required")
		log.Println("Please add DATABASE_URL to Railway variables")
		log.Println("Waiting 60 seconds before exit...")
		time.Sleep(60 * time.Second)
		log.Fatal("DATABASE_URL environment variable is required")
	}

	log.Printf("‚úÖ DATABASE_URL found: %s", maskDatabaseURL(databaseURL))

	// –®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	conn, err := connectToDatabase(databaseURL)
	if err != nil {
		log.Fatalf("‚ùå Database connection failed: %v", err)
	}
	defer conn.Close()

	log.Println("‚úÖ Successfully connected to database")

	// –®–∞–≥ 4: –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(os.Getenv("BOT_TOKEN"))
	if err != nil {
		log.Panicf("‚ùå Bot creation failed: %v", err)
	}

	log.Printf("‚úÖ Authorized on account %s", bot.Self.UserName)

	// –®–∞–≥ 5: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	userRepo := repo.NewRepo(conn)

	// –®–∞–≥ 6: –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
	startBot(bot, userRepo)
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
func checkEnvVariables() {
	variables := []string{"BOT_TOKEN", "DATABASE_URL", "RAILWAY_ENVIRONMENT", "PORT"}

	for _, v := range variables {
		value := os.Getenv(v)
		if value == "" {
			log.Printf("‚ùå %s: NOT SET", v)
		} else {
			if v == "BOT_TOKEN" || v == "DATABASE_URL" {
				log.Printf("‚úÖ %s: SET (value hidden for security)", v)
			} else {
				log.Printf("‚úÖ %s: %s", v, value)
			}
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func connectToDatabase(databaseURL string) (*pgxpool.Pool, error) {
	// –ò—Å–ø—Ä–∞–≤–∏—Ç—å URL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if strings.HasPrefix(databaseURL, "postgres://") {
		databaseURL = strings.Replace(databaseURL, "postgres://", "postgresql://", 1)
	}

	// –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
	config, err := pgxpool.ParseConfig(databaseURL)
	if err != nil {
		return nil, fmt.Errorf("parse config: %w", err)
	}

	// –î–ª—è Railway –¥–æ–±–∞–≤–∏—Ç—å SSL
	if os.Getenv("RAILWAY_ENVIRONMENT") != "" {
		config.ConnConfig.RuntimeParams["sslmode"] = "require"
	}

	// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
	conn, err := pgxpool.NewWithConfig(context.Background(), config)
	if err != nil {
		return nil, fmt.Errorf("create connection: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	err = conn.Ping(ctx)
	if err != nil {
		return nil, fmt.Errorf("ping database: %w", err)
	}

	return conn, nil
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
func startBot(bot *tgbotapi.BotAPI, userRepo *repo.Repo) {
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	webhookURL := os.Getenv("RAILWAY_STATIC_URL")
	if webhookURL == "" {
		// –†–µ–∂–∏–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
		log.Println("üöÄ Starting bot in POLLING mode (development)")
		_, _ = bot.Request(tgbotapi.DeleteWebhookConfig{DropPendingUpdates: true})

		botHandler := handler.NewHandler(bot, userRepo)
		botHandler.Start(false)
		return
	}

	// –†–µ–∂–∏–º webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	log.Printf("üöÄ Starting bot in WEBHOOK mode: %s", webhookURL)

	webhookConfig, err := tgbotapi.NewWebhook(webhookURL + "/webhook")
	if err != nil {
		log.Println(fmt.Sprintf("‚ùå Error creating webhook: %v", err))
	}
	_, err = bot.Request(webhookConfig)
	if err != nil {
		log.Printf("‚ö†Ô∏è Error setting webhook: %v", err)
	}

	updates := bot.ListenForWebhook("/webhook")

	go func() {
		log.Printf("üåê Starting HTTP server on port %s", port)
		log.Fatal(http.ListenAndServe(":"+port, nil))
	}()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)
	go func() {
		<-c
		log.Println("üõë Received interrupt signal. Shutting down...")
		os.Exit(0)
	}()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	botHandler := handler.NewHandler(bot, userRepo)
	log.Println("‚úÖ Bot is running and ready to receive messages")

	for update := range updates {
		botHandler.HandleUpdate(update)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è –≤ –ª–æ–≥–∞—Ö
func maskDatabaseURL(url string) string {
	if strings.Contains(url, "@") {
		parts := strings.Split(url, "@")
		authParts := strings.Split(parts[0], "://")
		if len(authParts) > 1 && strings.Contains(authParts[1], ":") {
			userPass := strings.Split(authParts[1], ":")
			if len(userPass) > 1 {
				return authParts[0] + "://" + userPass[0] + ":****@" + parts[1]
			}
		}
	}
	return url
}
