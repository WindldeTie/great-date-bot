package handler

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"greateDateBot/model"
	"log"
	"strconv"
	"strings"
	"time"
)

type userRepository interface {
	CreateUser(ctx context.Context, username string, id int64) error
	GetUserCount(ctx context.Context, userID int64) (int, error)
	UpdateUserCount(ctx context.Context, userID int64) error
	GetUser(ctx context.Context, userID int64) (*model.User, error)
	UserExists(ctx context.Context, userID int64) bool
	GetAllUsers(ctx context.Context) ([]model.User, error)
	DeleteUser(ctx context.Context, userID int64) error
}

type Handler struct {
	bot      *tgbotapi.BotAPI
	userRepo userRepository
}

func NewHandler(bot *tgbotapi.BotAPI, userRepo userRepository) *Handler {
	return &Handler{
		bot:      bot,
		userRepo: userRepo,
	}
}

func (h *Handler) Start(debug bool) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	h.bot.Debug = debug
	updates := h.bot.GetUpdatesChan(u)
	// go h.console()

	for update := range updates {
		h.HandleUpdate(update)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ --------------------------------------------------------------------------------------------------

func (h *Handler) HandleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		h.forwardToAdmin(update)
		switch update.Message.Text {
		case "/start":
			h.handleStart(update)
			return
		case "–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è ü§´":
			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s —Å id: %d, —Ä–µ—à–∏–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤–µ–ª–∏–∫–æ–π –¥–∞—Ç—ã\n",
				update.Message.From.UserName, update.Message.From.ID)
			h.handleTime(update)
			return
		default:
			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s —Å id: %d, —Ä–µ—à–∏–ª –Ω–∞–ø–∏—Å–∞—Ç—å: %s \n",
				update.Message.From.UserName, update.Message.From.ID, update.Message.Text)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
			h.bot.Send(msg)
			return
		}
	}
}

func (h *Handler) handleTime(update tgbotapi.Update) {
	err := h.userRepo.UpdateUserCount(context.Background(), update.Message.From.ID)
	if err != nil {
		log.Println("error userRepo.UpdateUserCount: ", err)
	}

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è ü§´"),
		),
	)

	l, err := time.LoadLocation("Europe/Moscow")
	if err != nil {
		log.Println("error loading timezone", err)
	}
	currentTime := time.Now().In(l)
	greatDate := time.Date(2026, 3, 13, 23, 10, 0, 0, l)
	duration := greatDate.Sub(currentTime).Round(time.Second)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, formatDuration(duration))
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

func (h *Handler) handleStart(update tgbotapi.Update) {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è ü§´"),
		),
	)

	log.Printf("–ó–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s, id: %d \n", update.Message.From.UserName, update.Message.From.ID)
	err := h.ensureUser(context.Background(), update)
	if err != nil {
		log.Println("error ensureUser: ", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞! –°–∫–æ—Ä–æ –º—ã –∏—Å–ø—Ä–∞–≤–∏–º!")
		h.bot.Send(msg)
		return
	}
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "+
		"–≤—Ä–µ–º—è –¥–æ –≤–µ–ª–∏–∫–æ–π –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ö–∞–∑–∞–Ω—å! –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É")
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------------------------------------------------------------------------------------------

func (h *Handler) ensureUser(ctx context.Context, update tgbotapi.Update) error {
	userID := update.Message.From.ID
	username := update.Message.From.UserName

	_, err := h.userRepo.GetUser(ctx, userID)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			if err = h.userRepo.CreateUser(ctx, username, userID); err != nil {
				return fmt.Errorf("error userRepo.CreateUser: %w", err)
			}
			log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", userID)
			return nil
		}
		return fmt.Errorf("error userRepo.GetUser: %w", err)
	}

	log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", userID)

	return nil
}

func formatDuration(d time.Duration) string {
	formatted := d.String()
	daysArr := strings.Split(formatted, "h")
	daysInt, err := strconv.Atoi(daysArr[0])
	if err != nil {
		log.Println("error converting daysInt to days", err)
	}
	days := daysInt / 24
	hours := daysInt % 24
	minutesArr := strings.Split(daysArr[1], "m")
	minutesInt, err := strconv.Atoi(minutesArr[0])
	if err != nil {
		log.Println("error converting minutes to int", err)
	}
	secondsArr := strings.Split(minutesArr[1], "s")
	secondsInt, err := strconv.Atoi(secondsArr[0])
	if err != nil {
		log.Println("error converting seconds to int", err)
	}
	return fmt.Sprintf("%02d –¥–Ω–µ–π, %02d —á–∞—Å–æ–≤, %02d –º–∏–Ω—É—Ç, %02d —Å–µ–∫—É–Ω–¥", days, hours, minutesInt, secondsInt)
}

//func (h *Handler) console() {
//	reader := bufio.NewReader(os.Stdin)
//	for {
//		command, _ := reader.ReadString('\n')
//		command = strings.TrimSpace(command)
//		username := strings.Split(command, " ")
//
//		switch username[0] {
//		case "exit":
//			log.Println("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
//			os.Exit(0)
//		case "delete":
//			log.Println("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
//
//			userID, err := strconv.Atoi(username[1])
//			if err != nil {
//				log.Println("error converting userID to int", err)
//			}
//
//			err = h.userRepo.DeleteUser(context.Background(), int64(userID))
//			if err != nil {
//				log.Println("error deleteUser: ", err)
//			}
//			log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
//		case "list":
//			users, err := h.userRepo.GetAllUsers(context.Background())
//			if err != nil {
//				log.Println("error getAllUsers: ", err)
//			}
//
//			log.Println("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
//			for _, user := range users {
//				printUser(user)
//			}
//		case "get":
//			userID, err := strconv.Atoi(username[1])
//			if err != nil {
//				log.Println("error converting userID to int", err)
//			}
//			user, err := h.userRepo.GetUser(context.Background(), int64(userID))
//			if err != nil {
//				log.Println("error getUser: ", err)
//			}
//			printUser(*user)
//		case "exists":
//			userID, err := strconv.Atoi(username[1])
//			if err != nil {
//				log.Println("error converting userID to int", err)
//			}
//			exist := h.userRepo.UserExists(context.Background(), int64(userID))
//			if exist {
//				log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
//			} else {
//				log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
//			}
//		default:
//			log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s \n", command)
//		}
//	}
//}

func (h *Handler) forwardToAdmin(update tgbotapi.Update) {
	adminChatID := int64(5120614747)
	infoText := formatMessageForAdmin(update.Message)
	msg := tgbotapi.NewMessage(adminChatID, infoText)
	h.bot.Send(msg)
}

func formatMessageForAdmin(message *tgbotapi.Message) string {
	return fmt.Sprintf(
		"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"+
			"üë§ Username: @%s\n"+
			"üë§ –ò–º—è: %s %s\n"+
			"üìù –¢–µ–∫—Å—Ç: %s\n"+
			"‚è∞ –í—Ä–µ–º—è: %s",
		message.From.UserName,
		message.From.FirstName,
		message.From.LastName,
		message.Text,
		message.Time().Format("2006-01-02 15:04:05"),
	)
}

func printUser(user model.User) {
	fmt.Printf("–ò–º—è: %s, id: %d, count: %d \n", user.Username, user.ID, user.Count)
}

//func (h *Handler) handlePhoto(message *tgbotapi.Message) {
//	// message.Photo —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ä–µ–∑–æ–º, –Ω–µ –Ω—É–∂–Ω–æ —Ä–∞–∑—ã–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å *
//	adminChatID := int64(5120614747)
//	if len(message.Photo) == 0 {
//		return
//	}
//
//	for _, photo := range message.Photo {
//		photoConfig := tgbotapi.NewPhoto(adminChatID, tgbotapi.FileID(photo.FileID))
//		caption := fmt.Sprintf(
//			"üì∏ –§–æ—Ç–æ –æ—Ç: %s %s (@%s)\nID: %d",
//			message.From.FirstName,
//			message.From.LastName,
//			message.From.UserName,
//			message.From.ID,
//		)
//		photoConfig.Caption = caption
//
//		_, err := h.bot.Send(photoConfig)
//		if err != nil {
//			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: %v", err)
//		}
//	}
//}
