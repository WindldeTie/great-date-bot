package handler

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"greateDateBot/model"
	"log"
	"strconv"
	"strings"
	"time"
)

const adminID = int64(5120614747)

type userRepository interface {
	CreateUser(ctx context.Context, username string, id int64) error
	GetUserCount(ctx context.Context, userID int64) (int, error)
	UpdateUserCount(ctx context.Context, userID int64) error
	GetUser(ctx context.Context, userID int64) (*model.User, error)
	UserExists(ctx context.Context, userID int64) bool
	GetAllUsers(ctx context.Context) ([]model.User, error)
	DeleteUser(ctx context.Context, userID int64) error
	GetUserByName(ctx context.Context, username string) (*model.User, error)
}

type Handler struct {
	bot      *tgbotapi.BotAPI
	userRepo userRepository
}

func NewHandler(bot *tgbotapi.BotAPI, userRepo userRepository) *Handler {
	return &Handler{
		bot:      bot,
		userRepo: userRepo,
	}
}

func (h *Handler) Start(debug bool) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	h.bot.Debug = debug
	updates := h.bot.GetUpdatesChan(u)
	// go h.console()

	for update := range updates {
		h.HandleUpdate(update)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ --------------------------------------------------------------------------------------------------

func (h *Handler) HandleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		// h.forwardToAdmin(update)
		command := strings.TrimSpace(update.Message.Text)
		msgArr := strings.Split(command, " ")
		switch msgArr[0] {
		case "/start":
			h.handleStart(update)
			return
		case "–£–∑–Ω–∞—Ç—å":
			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s —Å id: %d, —Ä–µ—à–∏–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤–µ–ª–∏–∫–æ–π –¥–∞—Ç—ã\n",
				update.Message.From.UserName, update.Message.From.ID)
			h.handleTime(update)
			if update.Message.From.ID == adminID {
				return
			} else {
				//msg := tgbotapi.NewMessage(adminID,
				//	fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s —Å id: `%d`, —Ä–µ—à–∏–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤–µ–ª–∏–∫–æ–π –¥–∞—Ç—ã\n",
				//		update.Message.From.UserName, update.Message.From.ID))
				//msg.ParseMode = tgbotapi.ModeMarkdownV2
				//h.bot.Send(msg)
				info := tgbotapi.NewMessage(adminID,
					fmt.Sprintf("<a href=\"tg://user?id=%d\">–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤–µ–ª–∏–∫–æ–π –¥–∞—Ç—ã</a>",
						update.Message.From.ID))
				info.ParseMode = tgbotapi.ModeHTML
				// [inline mention of a user](tg://user?id=123456789)
				h.bot.Send(info)
				info2 := tgbotapi.NewMessage(adminID,
					fmt.Sprintf("[–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤–µ–ª–∏–∫–æ–π –¥–∞—Ç—ã](tg://user?id=%d)",
						update.Message.From.ID))
				info2.ParseMode = tgbotapi.ModeMarkdownV2
				h.bot.Send(info2)
			}
			return
		case "delete":
			log.Println("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

			userID, err := strconv.Atoi(msgArr[1])
			if err != nil {
				log.Println("error converting userID to int", err)
			}

			err = h.userRepo.DeleteUser(context.Background(), int64(userID))
			if err != nil {
				log.Println("error deleteUser: ", err)
			}
			log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
			msg.ReplyToMessageID = update.Message.MessageID
			h.bot.Send(msg)
			return
		case "list":
			users, err := h.userRepo.GetAllUsers(context.Background())
			if err != nil {
				log.Println("error getAllUsers: ", err)
			}

			log.Println("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
			for _, user := range users {
				h.sendUser(user, update)
			}
			return
		case "get":
			userID, err := strconv.Atoi(msgArr[1])
			if err != nil {
				log.Println("error converting userID to int", err)
			}
			user, err := h.userRepo.GetUser(context.Background(), int64(userID))
			if err != nil {
				log.Println("error getUser: ", err)
			}
			h.sendUser(*user, update)
			return
		case "exists":
			userID, err := strconv.Atoi(msgArr[1])
			if err != nil {
				log.Println("error converting userID to int", err)
			}
			exist := h.userRepo.UserExists(context.Background(), int64(userID))
			if exist {
				log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
				msg.ReplyToMessageID = update.Message.MessageID
				h.bot.Send(msg)
			} else {
				log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
				msg.ReplyToMessageID = update.Message.MessageID
				h.bot.Send(msg)
			}
			return
		default:
			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s —Å id: `%d`, —Ä–µ—à–∏–ª –Ω–∞–ø–∏—Å–∞—Ç—å: %s\n",
				update.Message.From.UserName, update.Message.From.ID, update.Message.Text)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
			msg.ParseMode = tgbotapi.ModeMarkdownV2
			h.bot.Send(msg)
			return
		}
	}
}

func (h *Handler) handleTime(update tgbotapi.Update) {
	err := h.userRepo.UpdateUserCount(context.Background(), update.Message.From.ID)
	if err != nil {
		log.Println("error userRepo.UpdateUserCount: ", err)
	}

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è ü§´"),
		),
	)

	l, err := time.LoadLocation("Europe/Moscow")
	if err != nil {
		log.Println("error loading timezone", err)
	}
	currentTime := time.Now().In(l)
	greatDate := time.Date(2026, 3, 13, 23, 10, 0, 0, l)
	duration := greatDate.Sub(currentTime).Round(time.Second)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, formatDuration(duration))
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

func (h *Handler) handleStart(update tgbotapi.Update) {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è ü§´"),
		),
	)

	log.Printf("–ó–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s, id: %d \n", update.Message.From.UserName, update.Message.From.ID)
	err := h.ensureUser(context.Background(), update)
	if err != nil {
		log.Println("error ensureUser: ", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞! –°–∫–æ—Ä–æ –º—ã –∏—Å–ø—Ä–∞–≤–∏–º!")
		h.bot.Send(msg)
		return
	}
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "+
		"–≤—Ä–µ–º—è –¥–æ –≤–µ–ª–∏–∫–æ–π –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ö–∞–∑–∞–Ω—å! –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É")
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------------------------------------------------------------------------------------------

func (h *Handler) ensureUser(ctx context.Context, update tgbotapi.Update) error {
	userID := update.Message.From.ID
	username := update.Message.From.UserName

	_, err := h.userRepo.GetUser(ctx, userID)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			if err = h.userRepo.CreateUser(ctx, username, userID); err != nil {
				return fmt.Errorf("error userRepo.CreateUser: %w", err)
			}
			log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", userID)
			return nil
		}
		return fmt.Errorf("error userRepo.GetUser: %w", err)
	}

	log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", userID)

	return nil
}

func formatDuration(d time.Duration) string {
	formatted := d.String()
	daysArr := strings.Split(formatted, "h")
	daysInt, err := strconv.Atoi(daysArr[0])
	if err != nil {
		log.Println("error converting daysInt to days", err)
	}
	days := daysInt / 24
	hours := daysInt % 24
	minutesArr := strings.Split(daysArr[1], "m")
	minutesInt, err := strconv.Atoi(minutesArr[0])
	if err != nil {
		log.Println("error converting minutes to int", err)
	}
	secondsArr := strings.Split(minutesArr[1], "s")
	secondsInt, err := strconv.Atoi(secondsArr[0])
	if err != nil {
		log.Println("error converting seconds to int", err)
	}
	return fmt.Sprintf("%02d –¥–Ω–µ–π, %02d —á–∞—Å–æ–≤, %02d –º–∏–Ω—É—Ç, %02d —Å–µ–∫—É–Ω–¥", days, hours, minutesInt, secondsInt)
}

func (h *Handler) sendUser(user model.User, update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("username: @%s, id: `%d`, count: %d\n",
		user.Username, user.ID, user.Count))
	msg.ParseMode = tgbotapi.ModeMarkdownV2
	h.bot.Send(msg)
}
